// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserData should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserData
    hasErrored={
      Object {
        "hasErrored": false,
        "message": "nope",
      }
    }
    instances={90}
    loadingUser={
      Object {
        "loadingUser": true,
        "message": "Getting User Data",
      }
    }
    text="word"
    userData={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <h3
        className="username"
      >
        <span>
          <span
            className="loading-span"
          >
            getting user data
            <Loading
              className="loading-spinner-username"
              color="blueviolet"
              delay={0}
              height={25}
              type="spokes"
              width={25}
            />
          </span>
        </span>
      </h3>,
      "className": "user-data",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <span>
          <span
            className="loading-span"
          >
            getting user data
            <Loading
              className="loading-spinner-username"
              color="blueviolet"
              delay={0}
              height={25}
              type="spokes"
              width={25}
            />
          </span>
        </span>,
        "className": "username",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <span
            className="loading-span"
          >
            getting user data
            <Loading
              className="loading-spinner-username"
              color="blueviolet"
              delay={0}
              height={25}
              type="spokes"
              width={25}
            />
          </span>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "getting user data",
              <Loading
                className="loading-spinner-username"
                color="blueviolet"
                delay={0}
                height={25}
                type="spokes"
                width={25}
              />,
            ],
            "className": "loading-span",
          },
          "ref": null,
          "rendered": Array [
            "getting user data",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "loading-spinner-username",
                "color": "blueviolet",
                "delay": 0,
                "height": 25,
                "type": "spokes",
                "width": 25,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "span",
        },
        "type": "span",
      },
      "type": "h3",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <h3
          className="username"
        >
          <span>
            <span
              className="loading-span"
            >
              getting user data
              <Loading
                className="loading-spinner-username"
                color="blueviolet"
                delay={0}
                height={25}
                type="spokes"
                width={25}
              />
            </span>
          </span>
        </h3>,
        "className": "user-data",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <span>
            <span
              className="loading-span"
            >
              getting user data
              <Loading
                className="loading-spinner-username"
                color="blueviolet"
                delay={0}
                height={25}
                type="spokes"
                width={25}
              />
            </span>
          </span>,
          "className": "username",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <span
              className="loading-span"
            >
              getting user data
              <Loading
                className="loading-spinner-username"
                color="blueviolet"
                delay={0}
                height={25}
                type="spokes"
                width={25}
              />
            </span>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "getting user data",
                <Loading
                  className="loading-spinner-username"
                  color="blueviolet"
                  delay={0}
                  height={25}
                  type="spokes"
                  width={25}
                />,
              ],
              "className": "loading-span",
            },
            "ref": null,
            "rendered": Array [
              "getting user data",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "loading-spinner-username",
                  "color": "blueviolet",
                  "delay": 0,
                  "height": 25,
                  "type": "spokes",
                  "width": 25,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "span",
          },
          "type": "span",
        },
        "type": "h3",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
