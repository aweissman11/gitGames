// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MainPage should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MainPage
    getUserData={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "getUserData": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <SearchBar />,
        <DataSlider />,
      ],
      "className": "main-page",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <SearchBar />,
          <DataSlider />,
        ],
        "className": "main-page",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`MainPage should match the snapshot 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MainPage
    getUserData={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "getUserData": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
          ],
          Array [
            Object {
              "getUserData": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
              "pageNotFound": true,
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    pageNotFound={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <SearchBar />,
        <DataSlider />,
      ],
      "className": "main-page",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <SearchBar />,
          <DataSlider />,
        ],
        "className": "main-page",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`MainPage should match the snapshot 3`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MainPage
    getUserData={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "getUserData": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
          ],
          Array [
            Object {
              "getUserData": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
              "pageNotFound": true,
            },
          ],
          Array [
            Object {
              "getUserData": [MockFunction] {
                "calls": [Circular],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
              "hasErrored": true,
              "pageNotFound": true,
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    hasErrored={true}
    pageNotFound={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "loginPage": true,
      "pageNotFound": true,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "loginPage": true,
        "pageNotFound": true,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
